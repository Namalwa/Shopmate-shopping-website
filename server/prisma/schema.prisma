// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum Category {
  ACCESSORIES
  BEAUTY
  KIDS
  MEN
  WOMEN
}

enum ProductType {
  // Accessories
  BAGS
  JEWELRY
  STOCKINGS

  // Beauty
  MAKEUP
  LOTION
  SERUM

  // Kids
  KIDS_SHOES
  KIDS_DRESSES
  KIDS_TOYS

  // Men
  MEN_SHOES
  MEN_SHIRTS

  // Women
  WOMEN_SHOES
  WOMEN_DRESSES
}

// model User {
//   id        String   @id @default(uuid())
//   firstname String
//   lastname  String
//   email     String   @unique
//   username  String   @unique
//   password  String
//   role      Role     @default(CUSTOMER)
  
//   products  Product[] @relation("UserProducts")

//   @@map("users")
// }

// model Product {
//   id          String      @id @default(uuid())
//   title        String
//   description String
//   price       Float
//   imageUrl    String
//   category    Category    
//   productType ProductType 
//   createdById String
//   createdBy   User        @relation("UserProducts", fields: [createdById], references: [id])

//   @@map("products")
// }
model User {
  id        String   @id @default(uuid())
  firstname String
  lastname  String
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  
  products   Product[] @relation("UserProducts")
  carts      Cart[]    @relation("UserCarts")  
  createdCarts Cart[] @relation("CartCreatedBy") 

  @@map("users")
}

model Product {
  id          String      @id @default(uuid())
  title       String
  description String
  price       Float
  imageUrl    String
  category    Category    
  productType ProductType 
  createdById String
  createdBy   User        @relation("UserProducts", fields: [createdById], references: [id])

  carts       Cart[]      @relation("ProductCarts")

  @@map("products")
}

model Cart {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  quantity    Int      @default(1)
  createdById String   
  
  user        User     @relation("UserCarts", fields: [userId], references: [id])
  product     Product  @relation("ProductCarts", fields: [productId], references: [id])
  createdBy   User     @relation("CartCreatedBy", fields: [createdById], references: [id])

  @@map("carts")
}





